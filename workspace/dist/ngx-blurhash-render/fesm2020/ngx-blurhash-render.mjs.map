{"version":3,"file":"ngx-blurhash-render.mjs","sources":["../../../projects/ngx-blurhash-render/src/lib/ngx-blurhash.service.ts","../../../projects/ngx-blurhash-render/src/lib/ngx-blurhash.component.ts","../../../projects/ngx-blurhash-render/src/lib/ngx-blurhash.module.ts","../../../projects/ngx-blurhash-render/src/public-api.ts","../../../projects/ngx-blurhash-render/src/ngx-blurhash-render.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgxBlurhashService {\r\n\r\n  constructor() { }\r\n}\r\n","import { isPlatformBrowser } from '@angular/common';\r\nimport { Component, ElementRef, Inject, Input, PLATFORM_ID, ViewChild } from '@angular/core';\r\nimport { decode } from 'blurhash';\r\n\r\n/**\r\n * Blurhash rendering component for Angular 15+\r\n */\r\n@Component({\r\n  selector: 'ngx-blurhash-render',\r\n  template: `\r\n    <canvas\r\n      #canvas\r\n      [width]=\"canvasWidth\"\r\n      [height]=\"canvasHeight\"\r\n      [style.borderRadius]=\"borderRadius\"\r\n      [style.width]=\"width\"\r\n      [style.height]=\"height\"\r\n    ></canvas>\r\n    <img\r\n      alt=\"blurred-image\"\r\n      [ngSrc]=\"imageSrc\"\r\n      width=\"100\"\r\n      height=\"100\"\r\n      (load)=\"imageLoad = true\"\r\n      (onloadeddata)=\"imageLoaded = true\"\r\n      [class.img-loaded]=\"imageLoad\"\r\n      [style.borderRadius]=\"borderRadius\"\r\n      [style.width]=\"width\"\r\n      [style.height]=\"height\"\r\n    >\r\n  `,\r\n  styles: [\r\n    `\r\n    :host {\r\n      display: block;\r\n      position: relative;\r\n    }\r\n\r\n    canvas {\r\n      height: 100%;\r\n      width: 100%;\r\n      position: absolute;\r\n      left: 0;\r\n    }\r\n\r\n    img {\r\n      opacity: 0;\r\n      width: 100%;\r\n      height: 100%;\r\n      position: absolute;\r\n      object-fit: cover;\r\n      left: 0;\r\n    }\r\n\r\n    .img-loaded {\r\n      animation: popIn 0.4s both ease-in;\r\n    }\r\n\r\n    @keyframes popIn {\r\n      0% {\r\n        opacity: 0;\r\n      }\r\n\r\n      100% {\r\n        opacity: 1;\r\n      }\r\n    }\r\n  `\r\n  ]\r\n})\r\nexport class NgxBlurhashComponent {\r\n\r\n  private blurHashValue!: string;\r\n\r\n  /**\r\n   * The blurHash string to render on the Canvas\r\n   */\r\n  @Input()\r\n  get blurHash(): string {\r\n    return this.blurHashValue;\r\n  }\r\n  set blurHash(value: string) {\r\n    this.blurHashValue = value;\r\n    this.decodeBlurHash();\r\n  }\r\n\r\n\r\n  /**\r\n   * The image src string to render after fully loaded\r\n   */\r\n  private imageSrcValue!: string;\r\n  @Input()\r\n  get imageSrc(): string {\r\n    return this.imageSrcValue;\r\n  }\r\n  set imageSrc(value: string) {\r\n    this.imageSrcValue = value;\r\n  }\r\n\r\n  /**\r\n   * The loading of the image based on its position in the DOM. By default loading is set to 'eager'\r\n   */\r\n  @Input() loading: string = 'eager';\r\n\r\n  /**\r\n   * Border Radius for the image in px. Default value is 0px\r\n   */\r\n  @Input() borderRadius: string = '0';\r\n\r\n  /**\r\n   * The width of the image and canvas in px. Default value is 200px\r\n   */\r\n  @Input() width: string = '200px';\r\n\r\n  /**\r\n   * The height of the image and canvas in px. Default value is 200px\r\n   */\r\n  @Input() height: string = '200px';\r\n\r\n  public imageLoaded = false;\r\n  public imageLoad = false;\r\n\r\n  @ViewChild('canvas')\r\n  private canvas!: ElementRef<HTMLCanvasElement>;\r\n\r\n  public canvasWidth = 100;\r\n  public canvasHeight = 100;\r\n\r\n\r\n\r\n  public isBrowser: boolean;\r\n\r\n  constructor(@Inject(PLATFORM_ID) platformId: Object) {\r\n    this.isBrowser = isPlatformBrowser(platformId);\r\n  }\r\n  public ngAfterViewInit(): void {\r\n    this.decodeBlurHash();\r\n  }\r\n\r\n  private decodeBlurHash() {\r\n    if (this.canvas && this.blurHash) {\r\n      const context = this.canvas.nativeElement.getContext('2d');\r\n      const imageData = context?.createImageData(this.canvasWidth, this.canvasHeight);\r\n      const pixels = decode(this.blurHash, this.canvasWidth, this.canvasHeight);\r\n      imageData?.data.set(pixels);\r\n      if(imageData)\r\n        context?.putImageData(imageData, 0, 0);\r\n    }\r\n  }\r\n\r\n\r\n}\r\n","import { NgOptimizedImage } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { NgxBlurhashComponent } from './ngx-blurhash.component';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    NgxBlurhashComponent\r\n  ],\r\n  imports: [\r\n    NgOptimizedImage\r\n  ],\r\n  exports: [\r\n    NgxBlurhashComponent\r\n  ]\r\n})\r\nexport class NgxBlurhashModule { }\r\n","/*\r\n * Public API Surface of ngx-blurhash-render\r\n */\r\n\r\nexport * from './lib/ngx-blurhash.service';\r\nexport * from './lib/ngx-blurhash.component';\r\nexport * from './lib/ngx-blurhash.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}